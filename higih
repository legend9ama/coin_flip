#include "driver/timer.h"
#include "esp_log.h"
#include "esp_err.h"

static const char *TAG = "HW_TIMER";

#define TIMER_GROUP_ID   TIMER_GROUP_0
#define TIMER_ID         TIMER_0
#define TIMER_DIVIDER    80        // 80 MHz / 80 = 1 MHz (1 tick = 1 µs)
#define TIMER_INTERVAL_SEC 1       // 1 second period

// === ISR (Interrupt Service Routine) ===
// IRAM_ATTR обязательно, т.к. код исполняется из SRAM
static bool IRAM_ATTR timer_isr_callback(void *args)
{
    static uint32_t counter = 0;

    // Очистка флага прерывания
    TIMERG0.int_clr_timers.t0 = 1;
    // Разрешаем следующий аларм (autoreload)
    TIMERG0.hw_timer[TIMER_ID].config.alarm_en = TIMER_ALARM_EN;

    counter++;
    // Вывод через низкоуровневую функцию, которая работает в ISR
    ets_printf("Timer tick: %u second(s)\n", counter);

    return false; // не вызывать контекст переключения задач
}

void app_main(void)
{
    // === Настройка таймера ===
    timer_config_t config = {
        .divider = TIMER_DIVIDER,      // таймерная частота = 1 МГц
        .counter_dir = TIMER_COUNT_UP, // считаем вверх
        .counter_en = TIMER_PAUSE,     // пока остановлен
        .alarm_en = TIMER_ALARM_EN,    // включаем прерывания по совпадению
        .auto_reload = true,           // перезапускаем после срабатывания
        .intr_type = TIMER_INTR_LEVEL, // обычное прерывание уровня
    };
    ESP_ERROR_CHECK(timer_init(TIMER_GROUP_ID, TIMER_ID, &config));

    // Сброс счётчика
    ESP_ERROR_CHECK(timer_set_counter_value(TIMER_GROUP_ID, TIMER_ID, 0));

    // Настройка значения аларма (1 сек = 1 000 000 тиков при делителе 80)
    ESP_ERROR_CHECK(timer_set_alarm_value(TIMER_GROUP_ID, TIMER_ID, TIMER_INTERVAL_SEC * 1000000));

    // Разрешаем прерывания
    ESP_ERROR_CHECK(timer_enable_intr(TIMER_GROUP_ID, TIMER_ID));

    // Регистрируем обработчик прерываний
    ESP_ERROR_CHECK(timer_isr_callback_add(TIMER_GROUP_ID, TIMER_ID, timer_isr_callback, NULL, 0));

    // Запускаем таймер
    ESP_ERROR_CHECK(timer_start(TIMER_GROUP_ID, TIMER_ID));

    ESP_LOGI(TAG, "Hardware timer started: 1-second periodic output to serial");
}
