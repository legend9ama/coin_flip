#include <Arduino.h>
#include "driver/timer.h"

#define TIMER_DIVIDER         80        // 80 MHz / 80 = 1 MHz (1 tick = 1 µs)
#define TIMER_INTERVAL_SEC    1         // 1 second
#define TIMER_GROUP_ID        TIMER_GROUP_0
#define TIMER_ID              TIMER_0

// ISR (Interrupt Service Routine)
bool IRAM_ATTR onTimer(void *arg) {
  static uint32_t counter = 0;

  // Сброс флага прерывания
  TIMERG0.int_clr_timers.t0 = 1;
  // Разрешаем следующий аларм (автоперезапуск)
  TIMERG0.hw_timer[TIMER_ID].config.alarm_en = TIMER_ALARM_EN;

  counter++;
  ets_printf("Timer tick: %u second(s)\n", counter); // работает в ISR

  return false; // не переключаем контекст задач
}

void setup() {
  Serial.begin(115200);
  delay(500);
  Serial.println("Starting hardware timer...");

  timer_config_t config;
  config.alarm_en = TIMER_ALARM_EN;
  config.counter_en = TIMER_PAUSE;
  config.intr_type = TIMER_INTR_LEVEL;
  config.counter_dir = TIMER_COUNT_UP;
  config.auto_reload = true;
  config.divider = TIMER_DIVIDER;

  timer_init(TIMER_GROUP_ID, TIMER_ID, &config);
  timer_set_counter_value(TIMER_GROUP_ID, TIMER_ID, 0);
  timer_set_alarm_value(TIMER_GROUP_ID, TIMER_ID, TIMER_INTERVAL_SEC * 1000000);
  timer_enable_intr(TIMER_GROUP_ID, TIMER_ID);
  timer_isr_callback_add(TIMER_GROUP_ID, TIMER_ID, onTimer, NULL, 0);
  timer_start(TIMER_GROUP_ID, TIMER_ID);

  Serial.println("Timer started — 1-second periodic output to serial");
}

void loop() {
  // тут можно выполнять остальную логику
}
